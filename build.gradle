apply plugin: 'groovy'
apply plugin: 'maven-publish'
sourceCompatibility = 1.7

version = '0.0.3'
ext {
    isRelease = true
    dxVersion = '7.1.2_r33'

    localProperties = new Properties()
    if (file("build.properties").exists()) {
        file("build.properties").withReader { reader ->
            localProperties.load(reader)
        }
    }
    if (localProperties.MAVEN_REPO_PATH == null) localProperties.MAVEN_REPO_PATH = getRootProject().getProjectDir().absolutePath + "/repo/"
    if (localProperties.MAVEN_REPO_USERNAME == null) localProperties.MAVEN_REPO_USERNAME = ""
    if (localProperties.MAVEN_REPO_PASSWORD == null) localProperties.MAVEN_REPO_PASSWORD = ""
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "ethanjones.repackaged.android:dx:$dxVersion"
}

repositories {
    mavenCentral()
    maven { url "http://ethanjones.me/maven/snapshots/" }
    maven { url "http://ethanjones.me/maven/releases/" }
}

publishing {
    publications {
        jar(MavenPublication) {
            artifact project.tasks.jar
            groupId 'ethanjones.cubes'
            artifactId 'modplugin'
            version getMavenVersionString()

            pom.withXml {
                def repositories = asNode().appendNode('repositories')
                def ethanjonesSnapshots = repositories.appendNode('repository')
                ethanjonesSnapshots.appendNode('id', 'ethanjonesSnapshots')
                ethanjonesSnapshots.appendNode('url', 'http://ethanjones.me/maven/snapshots/')
                def ethanjonesReleases = repositories.appendNode('repository')
                ethanjonesReleases.appendNode('id', 'ethanjonesReleases')
                ethanjonesReleases.appendNode('url', 'http://ethanjones.me/maven/releases/')

                def dependencies = asNode().appendNode('dependencies')
                def dependencyDx = dependencies.appendNode('dependency')
                dependencyDx.appendNode('groupId', 'ethanjones.repackaged.android')
                dependencyDx.appendNode('artifactId', 'dx')
                dependencyDx.appendNode('version', dxVersion)
            }
        }
    }
    repositories {
        maven {
            url getMavenRepo()
            credentials {
                username localProperties.MAVEN_REPO_USERNAME
                password localProperties.MAVEN_REPO_PASSWORD
            }
        }
    }
}

def String getMavenVersionString() {
    def str = version;
    if (!isRelease) {
        str = str + "-SNAPSHOT"
    }
    return str
}

def String getMavenRepo() {
    def str = localProperties.MAVEN_REPO_PATH
    if (isRelease) {
        str = str + "releases"
    } else {
        str = str + "snapshots"
    }
    return str
}
